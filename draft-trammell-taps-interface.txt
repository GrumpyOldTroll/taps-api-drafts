



TAPS Working Group                                      B. Trammell, Ed.
Internet-Draft                                                ETH Zurich
Intended status: Informational                             M. Welzl, Ed.
Expires: August 12, 2018                              University of Oslo
                                                            G. Fairhurst
                                                  University of Aberdeen
                                                           M. Kuehlewind
                                                              ETH Zurich
                                                              C. Perkins
                                                   University of Glasgow
                                                               P. Tiesel
                                                             T. Enghardt
                                                               TU Berlin
                                                                 C. Wood
                                                              Apple Inc.
                                                       February 08, 2018


     An Abstract Application Layer Interface to Transport Services
                  draft-trammell-taps-interface-latest

Abstract

   This document describes an abstract programming interface to the
   transport layer, following the Transport Services Architecture.  It
   supports the asynchronous, atomic transmission of messages over
   transport protocols and network paths dynamically selected at
   runtime.  It is intended to replace the traditional BSD sockets API
   as the lowest common denominator interface to the transport layer, in
   an environment where endpoints have multiple interfaces and potential
   transport protocols to select from.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 12, 2018.



Trammell, et al.         Expires August 12, 2018                [Page 1]

Internet-Draft               TAPS Interface                February 2018


Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology and Notation  . . . . . . . . . . . . . . . . . .   3
   3.  Design Principles . . . . . . . . . . . . . . . . . . . . . .   4
   4.  API Summary . . . . . . . . . . . . . . . . . . . . . . . . .   5
   5.  Pre-Establishment Phase . . . . . . . . . . . . . . . . . . .   5
     5.1.  Resolving Remote Endpoints  . . . . . . . . . . . . . . .   5
     5.2.  Specifying Transport Parameters . . . . . . . . . . . . .   6
       5.2.1.  Protocol Selection Properties . . . . . . . . . . . .   7
       5.2.2.  Protocol Properties . . . . . . . . . . . . . . . . .  10
       5.2.3.  Path Selection Properties . . . . . . . . . . . . . .  12
       5.2.4.  Socket Intents  . . . . . . . . . . . . . . . . . . .  13
     5.3.  Specifying Cryptographic Parameters . . . . . . . . . . .  16
   6.  Establishing Connections  . . . . . . . . . . . . . . . . . .  16
     6.1.  Active Open: Initiate . . . . . . . . . . . . . . . . . .  16
     6.2.  Passive Open: Listen  . . . . . . . . . . . . . . . . . .  17
     6.3.  Peer to Peer Establishment: Rendezvous  . . . . . . . . .  18
     6.4.  Connection Groups . . . . . . . . . . . . . . . . . . . .  18
   7.  Sending Data  . . . . . . . . . . . . . . . . . . . . . . . .  19
     7.1.  Send Properties . . . . . . . . . . . . . . . . . . . . .  20
       7.1.1.  Lifetime  . . . . . . . . . . . . . . . . . . . . . .  20
       7.1.2.  Niceness  . . . . . . . . . . . . . . . . . . . . . .  20
       7.1.3.  Ordered . . . . . . . . . . . . . . . . . . . . . . .  21
       7.1.4.  Immediate . . . . . . . . . . . . . . . . . . . . . .  21
       7.1.5.  Idempotent  . . . . . . . . . . . . . . . . . . . . .  21
     7.2.  Sender-side Framing . . . . . . . . . . . . . . . . . . .  21
   8.  Receiving Data  . . . . . . . . . . . . . . . . . . . . . . .  21
     8.1.  Application-Layer Backpressure at the Receiver  . . . . .  22
     8.2.  Receiver-side Deframing over Stream Protocols . . . . . .  22
   9.  Connection Termination  . . . . . . . . . . . . . . . . . . .  23
   10. Event and Error Handling  . . . . . . . . . . . . . . . . . .  23
   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  24



Trammell, et al.         Expires August 12, 2018                [Page 2]

Internet-Draft               TAPS Interface                February 2018


   12. Security Considerations . . . . . . . . . . . . . . . . . . .  24
   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  24
     13.1.  Normative References . . . . . . . . . . . . . . . . . .  24
     13.2.  Informative References . . . . . . . . . . . . . . . . .  24
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  25

1.  Introduction

   The BSD Unix Sockets API's SOCK_STREAM abstraction, by bringing
   network sockets into the UNIX programming model, allowing anyone who
   knew how to write programs that dealt with sequential-access files to
   also write network applications, was a revolution in simplicity.  It
   would not be an overstatement to say that this simple API is the
   reason the Internet won the protocol wars of the 1980s.  SOCK_STREAM
   is tied to the Transmission Control Protocol (TCP), specified in 1981
   [RFC0793].  TCP has scaled remarkably well over the past three and a
   half decades, but its total ubiquity has hidden an uncomfortable
   fact: the network is not really a file, and stream abstractions are
   too simplistic for many modern application programming models.

   In the meantime, the nature of Internet access, and the variety of
   Internet transport protocols, is evolving.  The challenges that new
   protocols and access paradigms present to the sockets API and to
   programming models based on them inspire the design principles of a
   new approach, which we outline in Section 3.

   As a first step to realizing this design, [TAPS-ARCH] describes a
   high-level architecture for transport services.  This document builds
   a modern abstract programming interface atop this architecture,
   deriving specific path and protocol selection properties and
   supported transport features from the analysis provided in [RFC8095]
   and [TAPS-MINSET].

2.  Terminology and Notation

   This API is described in terms of Objects, which an application can
   interact with; Actions the application can perform on these objects;
   Events, which an object can send to an application asynchronously;
   and Parameters associated with these Actions and Events.

   The following notations, which can be combined, are used in this
   document:

   o  Object := Action()



         An Action creates an Object.



Trammell, et al.         Expires August 12, 2018                [Page 3]

Internet-Draft               TAPS Interface                February 2018


   o  Object.Action()



         An Action is performed on an Object.

   o  Object -> Event<>



         An Object sends an Event.

   o  Action(parameter, parameter, ...) / Event<parameter, parameter,
      ...>



         An Action takes a set of Parameters; an Event contains a set of
         Parameters.

   Actions associated with no object are Actions on the abstract
   interface itself; they are equivalent to actions on a per-application
   global context.

   How these abstract concepts map into concrete implementations of this
   API in a given language on a given platform is largely dependent on
   the features of the language and the platform.  Actions could be
   implemented as functions or method calls, for instance, and Events
   could be implemented via callback passing or other asynchronous
   calling conventions.

3.  Design Principles

   We begin with a set of initial design principles for the abstract
   interface to realize.

   o  Transport protocol stack independence in line with the Transport
      Services Architecture [TAPS-ARCH], allowing applications to be
      written in terms of the semantics best for the application's own
      design, separate from the protocol(s) used on the wire to achieve
      them.  This enables applications written to a single API to make
      use of transport protocols in terms of the features they provide.

   o  Explicit support for multistreaming and multipath transport
      protocols.






Trammell, et al.         Expires August 12, 2018                [Page 4]

Internet-Draft               TAPS Interface                February 2018


   o  Explicit support for security properties as first-order transport
      features, and for long-term caching of cryptographic identities
      and parameters for associations among endpoints.

   o  Atomic transmission of content, using application-assisted framing
      and deframing where the underlying transport does not provide
      these.

   o  Asynchronous connection establishment, transmission, and
      reception, allowing most application interactions with the
      transport layer to be event-driven.

4.  API Summary

   [TASK: write three paragraph summary here, should state how all this
   works for common cases from the application's PoV.]

   In the following sections, we describe the details of application
   interaction with Objects through Actions and Events in each phase of
   a connection, following the phases described in [TAPS-ARCH].

5.  Pre-Establishment Phase

   Establishment begins with the creation of a Connection...

   Connection := NewConnection(localSpecifier, remoteSpecifier,
   transportParameters, cryptographicParameters)

   [NOTE: note also that framers and deframers should be bound to
   connections during pre-establishment, forward-reference Section 7.2
   and Section 8.2]

5.1.  Resolving Remote Endpoints

   Name resolution is no explicit step of a transport service API.
   Therefore, name resolution may be deferred until connection
   establishment to incorporate transport parameters.  Instead, a
   remoteSpecifier object representing the remote endpoint is created
   providing an appropriate endpoint representation, which include IP
   addresses, hostnames and URLs:

   remoteSpecifier := Endpoint()
   remoteSpecifier.withUrl("https://example.com")

   remoteSpecifier := Endpoint()
   remoteSpecifier.withHostname("example.com"
   remoteSpecifier.withService("https")




Trammell, et al.         Expires August 12, 2018                [Page 5]

Internet-Draft               TAPS Interface                February 2018


   remoteSpecifier := Endpoint()
   remoteSpecifier.withIPv6Address(2001:db8:4920:e29d:a420:7461:7073:0a)
   remoteSpecifier.withPort(443)

   remoteSpecifier := Endpoint()
   remoteSpecifier.withIPv4Address(192.0.2.21)
   remoteSpecifier.withPort(443)

   Implementations may also support additional endpoint representations
   and provide a single Endpoint() call that takes different endpoint
   representations.

   Endpoint representations may imply transport protocols,
   pseudotransport protocols, or families of protocols, e.g.,
   remoteSpecifier.withUrl("https://example.com") implies either using
   HTTP over TLS over TCP or using HTTP over QUIC over UDP.  Whether the
   protocols implied by the endpoint representation are provided by the
   transport system is implementation specific, but MUST BE tunable
   using pre-establishment properties.  Implementations SHOULD provide
   all parts of the implied transport stack they implement unless
   specified otherwise using pre-establishment properties.  For example,
   the transport system may provide TLS over TCP in the above example
   and let the application implement HTTP pseudo-transport itself.

   [TASK: match with #initiate / #listen / #rendezvous and make sure the
   transport stack used is communicated ]

5.2.  Specifying Transport Parameters

   When creating a connection, an application needs to specify transport
   parameters reflecting its requirements and preferences regarding its
   communication.  These Transport parameters include Protocol Selection
   Properties, Protocol Properties (configuration of a transport
   protocol once it has been selected), Path Selection Properties, and
   Socket Intents (hints to the TAPS system what to optimize for).

   Some Protocol Selection Properties are strict requirements that the
   application relies on, while others are hints of what transport
   features would be helpful for the application.  For example, if an
   application asks for reliable data transfer, choosing a transport
   protocol such as UDP, which does not have this feature, will break
   the application's functionality.  On the other hand, the option to
   disable checksums when sending an individual message can help
   optimize for low latency, but if not present, it will most likely not
   break the fundamental assumptions of the application.

   Moreover, there can be conflicts between properties set by the
   application: If multiple features are requested which are offered by



Trammell, et al.         Expires August 12, 2018                [Page 6]

Internet-Draft               TAPS Interface                February 2018


   different protocols, it may not be possible to satisfy all
   requirements.  Consequently, a TAPS system must prioritize transport
   parameters and consider the relevant trade-offs, see also
   [TAPS-MINSET].

   [Should it be possible for an application to specify which properties
   are most important to it, or to set properties as required?]

   There need to be sensible defaults for the Protocol Selection
   Properties.  The defaults given in the following section represent a
   configuration that can be implemented over TCP.  An alternate set of
   default Protocol Selection Properties would represent a configuration
   that can be implemented over UDP.

   Note that some parameters can also be set later in the lifetime of a
   connection.  However, Protocol Selection Properties and Path
   Selection Properties must be specified before Initiate() to be
   useful.  For other properties, it is beneficial for the application
   to set them as early as possible in order to help the TAPS system
   optimize.

   Connections can be cloned at any time, before or after establishment.
   A cloned connection and its parent are entangled: they share the same
   properties, changing any parameter for one of them also changes the
   parameter for the other, connecting one of them also connects the
   other, etc.  There is only one exception: priority assignment ((see
   also Section 6.4 for more details).  Cloning connections during pre-
   establishment is encouraged, as it informs the transport system about
   the intent to use Connection Groups.

   Connection := Create(ProtocolSelectionProperties, ProtocolProperties,
   PathSelectionProperties, SocketIntents)

   Connection.Configure(ProtocolProperties, SocketIntents)

   Connection.QueryProperties()

   Connection := Connection.Clone()

5.2.1.  Protocol Selection Properties

   Reliable Data Transfer

   This boolean property specifies whether the application needs the
   transport protocol to ensure that data is received completely and
   without corruption on the other side.  This property applies to
   connections and connection groups.  This is a strict requirement.
   The default is to enable Reliable Data Transfer.



Trammell, et al.         Expires August 12, 2018                [Page 7]

Internet-Draft               TAPS Interface                February 2018


   Notification of peer closing/aborting

   This boolean property specifies whether the application needs the
   transport protocol to inform it in case the connection terminates.
   This property applies to connections and connection groups.  This is
   a strict requirement.  The default is to enable such notifications.

   Preservation of data ordering

   This boolean property specifies whether the application needs the
   transport protocol to assure that data is received by the application
   on the other end in the same order as it was sent.  This property
   applies to connections and connection groups.  This is a strict
   requirement.  The default is to preserve data ordering.

   Option to configure reliability for individual messages

   This boolean property specifies whether an application considers it
   useful to indicate its reliability requirements on a per-message
   basis.  This property applies to connections and connection groups.
   This is not a strict requirement.  The default is to not have this
   option.

   Option of unordered message delivery

   This boolean property specifies whether an application allows
   messages to be delivered in a different order than they were sent,
   potentially at the benefit of lower latency for individual messages.
   This property applies to connections and connection groups.  This is
   not a strict requirement.  The default is to not have this option, so
   all data arrives strictly in-order.

   Option to request not to delay acknowledgement (SACK) of a message

   This boolean property specifies whether an application considers it
   useful to request for a message that its acknowledgement be sent out
   as early as possible (SACK) instead of potentially being bundled with
   other acknowledgements.  This property applies to connections and
   connection groups.  This is not a strict requirement.  The default is
   to not have this option.

   Option to hand over a message to reliably transfer (possibly multiple
   times) before connection establishment (0-RTT idempotent)

   This boolean property specifies whether an application would like to
   supply a message to the transport protocol before connection
   establishment, which will then be reliably transferred to the other
   side before or during connection establishment, potentially multiple



Trammell, et al.         Expires August 12, 2018                [Page 8]

Internet-Draft               TAPS Interface                February 2018


   times.  See also Section 7.1.5.  This property applies to connections
   and connection groups.  This is a strict requirement.  The default is
   to not have this option.

   Option to assign priority or weight per connection in a group

   This boolean property specifies whether an application considers it
   useful to have the option to explicitly prioritize between multiple
   connections within a connection group.  This property applies to
   connection groups.  This is not a strict requirement.  The default is
   to not have this option.

   Option to choose a scheduler between connections in a group

   This boolean property specifies whether an application considers it
   useful to have the option to explicitly set a scheduler between the
   connections within a connection group.  This property applies to
   connection groups.  This is not a strict requirement.  The default is
   to not have this option.

   Suggest a timeout to the peer

   This boolean property specifies whether an application considers it
   useful to propose a timeout until the connection is assumed to be
   lost.  This property applies to connections and connection groups.
   This is not a strict requirement.  The default is to have this
   option.

   Notification of excessive retransmissions (early warning before
   abortion threshold)

   This boolean property specifies whether an application considers it
   useful to be informed in case sent data was retransmitted more often
   than a certain threshold.  This property applies to connections and
   connection groups.  This is not a strict requirement.  The default is
   to have this option.

   Notification of ICMP error message arrival

   This boolean property specifies whether an application considers it
   useful to be informed in case an ICMP error message is received
   related to this connection.  This property applies to connections and
   connection groups.  This is not a strict requirement.  The default is
   to have this option.

   Specify checksum coverage used by sender





Trammell, et al.         Expires August 12, 2018                [Page 9]

Internet-Draft               TAPS Interface                February 2018


   This boolean property specifies whether the application considers it
   useful to have the option to specify what parts of the transmitted
   data should be covered by the transport protocol checksum.  This
   property applies to connections and connection groups.  This is not a
   strict requirement, as it signifies a reduction in reliability.  The
   default is full checksum coverage without being able to change it.

   Option to disable checksum when sending an individual message

   This boolean property specifies whether the application considers it
   useful to have the option to disable checksums for individual
   messages.  This property applies to connections and connection
   groups.  This is not a strict requirement, as it signifies a
   reduction in reliability.  The default is full checksum coverage
   without the option to disable it.

   Specify minimum checksum coverage required by receiver

   This boolean property specifies whether the application considers it
   useful to have the option to specify what parts of the received data
   it needs to be covered by the checksum.  This property applies to
   connections and connection groups.  This is not a strict requirement,
   as it signifies a reduction in reliability.  The default is full
   checksum coverage without being able to change it.

   Option to disable checksum requirement when receiving an individual
   message

   This boolean property specifies whether an application considers it
   useful to have the option to communicate to the remote endpoint that
   it does not require an individual message to be covered by a
   checksum.  This property applies to connections and connection
   groups.  This is not a strict requirement, as it signifies a
   reduction in reliability.  The default is full checksum coverage
   without the option to disable it.

5.2.2.  Protocol Properties

   Protocol Properties represent the configuration of a transport
   protocols once it has been selected.  A transport protocol may not
   support all Protocol Properties, depending on the available transport
   features.  An application should specify the Protocol Properties as
   early as possible to help the TAPS system optimize.  However, a TAPS
   system will only actually set those protocol properties that are
   actually supported by the chosen transport protocol.  Some of these
   properties can also be set on individual messages, similar to the
   properties in Section 7.1.




Trammell, et al.         Expires August 12, 2018               [Page 10]

Internet-Draft               TAPS Interface                February 2018


   The default settings of these properties depends on the chosen
   protocol and on the system configuration.

   Set timeout for aborting connection

   This numeric property specifies how long to wait before aborting a
   connection.  It is given in seconds.  This property applies to
   connections and connection groups.

   Set timeout to suggest to the peer

   This numeric property specifies the timeout to propose to the peer.
   It is given in seconds.  This property applies to connections and
   connection groups.

   Set retransmissions before "Excessive Retransmissions"

   This numeric property specifies after how many retransmissions to
   inform the application about "Excessive Retransmissions".  It applies
   to connections and connection groups.

   Set whether to use a checksum for sending

   This boolean property specifies whether to use a checksum for sending
   messages on this connection.  The default is to use checksums.  This
   property applies to connections, connection groups, and messages.

   Set length of send checksum

   This numeric property specifies the length of the checksum of
   messages sent on this connection.  It is given in Bytes.  This
   property applies to connections, connection groups, and messages.

   Set whether to require a checksum for receiving

   This boolean property specifies whether to communicate to the remote
   endpoint that it does not require messages on this connection to be
   covered by a checksum.  This property applies to connections,
   connection groups, and messages.

   Set required minimum coverage of the checksum

   This numeric property specifies the part of the received data that
   needs to be covered by a checksum.  It is given in Bytes.  This
   property applies to connections, connection groups, and messages.

   Set scheduler for connections in a group




Trammell, et al.         Expires August 12, 2018               [Page 11]

Internet-Draft               TAPS Interface                February 2018


   This property specifies which scheduler should be used among
   connections within a connection group.  It applies to connection
   groups.  For now we suggest we suggest the schedulers defined in
   [I-D.ietf-tsvwg-sctp-ndata].

   Configure the priority of a connection for the scheduler

   This property specifies what priority to assign to a connection
   within a connection group.  It applies to a connection.  We suggest
   the priority as described in [I-D.ietf-tsvwg-sctp-ndata].

   Set low watermark for buffer to nofity the application

   This numeric property specifies the buffer threshold below which the
   application wants to be informed.  It is given in Bytes.  This
   property applies to connections and connection group.

   Maximum Message Size Before Connection Establishment

   This numeric property can be queried by the application after
   creating a connection.  It represents the maximum message size that
   can be sent before or during connection establishment, see also
   Section 7.1.5.  It is given in Bytes.

5.2.3.  Path Selection Properties

   Not all transport protocols work on all paths.  Thus, transport
   protocol selection is tied to path selection, which may involve
   choosing between multiple local interfaces that are connected to
   different access networks.

   Path Selection Properties are requirements, prohibitions, or
   preferences, that an application has regarding path selection.  These
   properties should be specified as early as possible in order to help
   the TAPS system optimize.  However, they may also be specified later.

   Interface Type to prefer

   This property specifies which kind of access network interface, e.g.,
   WiFi, Ethernet, or LTE, to prefer over others for this connection, in
   case they are available.  This is not a strict requirement.  The
   default is to use the default interface configured in the system
   policy.

   Interface Type to prohibit

   This property specifies which kind of access network interface, e.g.,
   WiFi, Ethternet, or LTE, to not use for this connection.  This is a



Trammell, et al.         Expires August 12, 2018               [Page 12]

Internet-Draft               TAPS Interface                February 2018


   strict requirement and connection establishment will fail if no other
   interface is available.  The default is to not prohibit any
   particular interface.

5.2.4.  Socket Intents

   Socket Intents are a group of properties expressing what an
   application wants to achieve, knows, assumes or prefers regarding its
   communication.  They are not strict requirements.  In particular,
   they should not be used to express any Quality of Service
   expectations that an application might have.  Instead, an application
   should express its intentions and its expected traffic
   characteristics in order to help the TAPS system make decisions that
   best match it, but on a best-effort basis.  Even though Socket
   Intents do not represent Quality of Service requirements, a TAPS
   system may use them to determine a DSCP value, e.g. similar to
   Table 1 in [I-D.ietf-tsvwg-rtcweb-qos].

   Socket Intents can influence protocol selection, protocol
   configuration, path selection, and endpoint selection.  For example,
   setting the "Timeliness" Intent to "Interactive" may lead the TAPS
   system to disable the Nagle algorithm for a connection, while setting
   the "Timeliness" to "Background" may lead it to setting the DSCP
   value to "scavenger".  If the "Size to be Sent" Intent is set on a
   series of messages, it may influence path selection, e.g., when the
   TAPS system schedules big messages over an interface with higher
   bandwidth, and small messages over an interface with lower latency.

   Specifying Socket Intents is not mandatory.  An application can
   specify any combination of Socket Intents.  All Socket Intents can be
   specified for connections and connection groups.  Some Intents can
   also be specified for individual messages, similar to the properties
   in Section 7.1.

   Traffic Category

   This Intent specifies what the application expect the dominating
   traffic pattern to be.  It applies to connections and connection
   groups

   Possible Category values are:

   Query:  Single request / response style workload, latency bound

   Control:  Long lasting low bandwidth control channel, not bandwidth
      bound

   Stream:  Stream of bytes/messages with steady data rate



Trammell, et al.         Expires August 12, 2018               [Page 13]

Internet-Draft               TAPS Interface                February 2018


   Bulk:  Bulk transfer of large messages, presumably bandwidth bound

   The default is to not assume any particular traffic pattern.  Most
   categories suggest the use of other intents to further describe the
   traffic pattern anticipated, e.g., the bulk category suggesting the
   use of the Message Size intents or the stream category suggesting the
   Stream Bitrate and Duration intents.

   Size to be Sent / Received

   This Intent specifies what the application expects the size of a
   transfer to be.  It is a numeric property and given in Bytes.  It can
   also apply to individual messages.

   Duration

   This Intent specifies what the application expects the lifetime of a
   transfer to be.  It is a numeric property and given in milliseconds.
   It applies to connections and connection groups.

   Stream Bitrate Sent / Received

   This Intent specifies what the application expects the bitrate of a
   transfer to be.  It is a numeric property and given in Bytes per
   second.  It applies to connections and connection groups.

   Burstiness

   This Intent specifies what the application expects the sender-side
   burst characteristics of the traffic to be.  The application can
   provide hints about the anticipated communication pattern, i.e., how
   it expects the number of sent bytes to vary over time and the
   expected length of sequences of consecutively sent messages.  Note
   that the actual burst characteristics will depend on the network,
   especially at the receiver side.  This Intents applies to connections
   and connection groups.

   Possible Burstiness values are:

   No Bursts:  Application sends traffic at a constant rate

   Regular Bursts:  Application sends bursts of traffic periodically

   Random Bursts:  Application sends bursts of traffic irregularly

   Bulk:  Application sends a bulk of traffic

   The default is to not assume any particular burst characteristics.



Trammell, et al.         Expires August 12, 2018               [Page 14]

Internet-Draft               TAPS Interface                February 2018


   Timeliness

   This Intent specifies what delay characteristcs the applications
   prefers.  It provides hints for the TAPS system whether to optimize
   for low latency or other criteria.  Note that setting this Intents
   does not imply any guarantees on whether an application's
   requirements can actually be satisfied.  This Intents applies to
   connections, connection groups, or messages.

   Stream:  Delay and packet delay variation should be kept as low as
      possible

   Interactive:  Delay should be kept as low as possible, but some
      variation is tolerable

   Transfer:  Delay and packet delay variation should be reasonable, but
      are not critical

   Background:  Delay and packet delay variation is no concern

   The default is "Transfer".

   Disruption Resilience

   This Intent describes what an application knows about its own ability
   to deal with disruption of its communication, e.g., connection loss.
   It provides hints of how well an application assumes it can recover
   from such disturbances and can have an impact on the tradeoff between
   providing failover techniques and resource utilization.  This Intent
   applies to connections, connection groups, and messages.

   Sensitive:  Disruptions result in application failure, disrupting
      user experience

   Recoverable:  Disruptions are inconvenient for the application, but
      can be recovered from

   Resilient:  Disruptions have minimal impact for the application

   The default is "Sensitive".

   Cost Preferences

   This Intent describes what an application prefers regarding monetary
   costs, e.g., whether it considers it acceptable to utilize limited
   data volume.  It provides hints to the TAPS system on how to handle
   tradeoffs between cost and performance or reliability.  This Intent
   applies to connections, connection groups, and messages.



Trammell, et al.         Expires August 12, 2018               [Page 15]

Internet-Draft               TAPS Interface                February 2018


   No Expense:  Avoid transports associated with monetary cost

   Optimize Cost:  Prefer inexpensive transports and accept service
      degradation

   Balance Cost:  Use system policy to balance cost and other criteria

   Ignore Cost:  Ignore cost, choose transport solely based on other
      criteria

   The default is "Balance Cost".

5.3.  Specifying Cryptographic Parameters

   [TASK: write me. separate out cryptographic parameters, since these
   bind to a local and a remote. chris?]

6.  Establishing Connections

   Before a Connection can be used for data transfer, it must be
   established.  Establishment ends the pre-establishment phase; all
   transport and cryptographic parameter specification must be complete
   before establishment, as these parameters will be used to select
   candidate Paths and Protocol Stacks for the Connection.
   Establishment may be active, using the Initiate() Action; passive,
   using the Listen() Action; or simultaneous for peer-to-peer, using
   the Rendezvous() Action.  These Actions are described in the
   subsections below.

6.1.  Active Open: Initiate

   Active open is the action of establishing a connection to an endpoint
   presumed to be listening for incoming connection requests, commonly
   used by clients in client-server interactions.  Active open is
   supported by this interface through the Initiate action:

   Connection.Initiate()

   Before calling Initiate, the caller must have initialized the
   Connection during the pre-establishment phase with local and remote
   endpoint specifiers, as well as all parameters necessary for
   candidate selection.  After calling Initiate, no further parameters
   may be bound to the Connection, and no subsequent establishment call
   may be made on the Connection.

   Once Initiate is called, the candidate Protocol Stack(s) may cause
   one or more transport-layer connections to be created to the
   specified remote endpoint.  The caller may immediately begin sending



Trammell, et al.         Expires August 12, 2018               [Page 16]

Internet-Draft               TAPS Interface                February 2018


   Content on the Connection (see Section 7) after calling Initate,
   though it may wait for one of the following events before doing so.

   Connection -> Ready<>

   The Ready event occurs after Initiate has established a transport-
   layer connection on at least one usable candidate Protocol Stack over
   at least one candidate Path.  No Receive events (see Section 8) will
   occur until after the Ready event for connections established using
   Initiate.  [MICHAEL: This is a difficult read.  Can we phrase this as
   "...will occur before the Ready event for connections...", or did you
   have a specific reason to write "until after the Ready event"?]

   Connection -> InitiateError<>

   An InitiateError occurs either when the set of local and remote
   specifiers and transport and cryptographic parameters cannot be
   fulfilled on a connection for initiation (e.g. the set of available
   Paths and/or Protocol Stacks meeting the constraints is empty), when
   the remote specifier cannot be resolved, or when no transport-layer
   connection can be established to the remote endpoint (e.g.  because
   the remote endpoint is not accepting connections, or the application
   is prohibited from opening a connection by the operating system).

6.2.  Passive Open: Listen

   Passive open is the action of waiting for connections from remote
   endpoints, commonly used by servers in client-server interactions.
   Passive open is supported by this interface through the Listen
   action:

   Connection.Listen()

   Before calling Listen, the caller must have initialized the
   Connection during the pre-establishment phase with local endpoint
   specifiers, as well as all parameters necessary for Protocol Stack
   selection.  After calling Listen, no further parameters may be bound
   to the Connection, and no subsequent establishment call may be made
   on the Connection.

   Connection -> ConnectionReceived<Connection>

   The ConnectionReceived event occurs when a remote endpoint has
   established a transport-layer connection to this Connection or when
   the remote endpoint has sent its first Content, causing a new
   Connection to be created.  The resulting Connection is contained
   within the ConnectionReceived event, and is ready to use as soon as
   it is passed to the application via the event.



Trammell, et al.         Expires August 12, 2018               [Page 17]

Internet-Draft               TAPS Interface                February 2018


   [MICHAEL: JFYI, just to explain why I added "or when the remote
   endpoint has sent its first Content" above: in case the connection is
   in fact a stream, nothing may happen on the wire when doing Connect,
   and the first thing the listener gets may already be the first data
   block.]

   Connection -> ListenError<>

   A ListenError occurs either when the set of local specifier,
   transport and cryptographic parameters cannot be fulfilled for
   listening, when the local specifier cannot be resolved, or when the
   application is prohibited from listening by the operating system.

6.3.  Peer to Peer Establishment: Rendezvous

   Connection.Rendezvous()

   Connection -> Ready<>

   Connection -> RendezvousError<>

6.4.  Connection Groups

   Groups of Connections can be created using Clone action:

   Connection := Connection.Clone()

   Calling this once yields a group of two Connections: the parent
   Connection - whose Clone action was called - and the resulting clone.
   Calling Clone on any of these two Connections adds a third Connection
   to the group, and so on.  All Connections in a group are entangled.
   This means that they automatically share all properties: changing a
   parameter for one of them also changes the parameter for all others,
   closing one of them also closes all others, etc.

   There is only one Protocol Property that is not entangled, i.e. it is
   a separate per-Connection Property for individual Connections in the
   group: a priority.  This priority, which can be represented as a non-
   negative integer or float, expresses a desired share of the
   Connection Group's available network capacity, such that an ideal
   transport system implementation would assign the Connection the
   capacity share P x C/sum_P, where P = priority, C = total available
   capacity and sum_P = sum of all priority values that are used for the
   Connections in the same Connection Group.  The priority setting is
   purely advisory; no guarantees are given.

   Connection Groups should be created (i.e., the Clone action should be
   used) as early as possible, ideally already during the Pre-



Trammell, et al.         Expires August 12, 2018               [Page 18]

Internet-Draft               TAPS Interface                February 2018


   Establishment phase, in order to aid the Transport System in choosing
   and configuring the right protocols (see also Section 5.2).

7.  Sending Data

   Once a Connection has been established, it can be used for sending
   data.  Data is sent by passing a Content object and additional
   properties Section 7.1 to the Send action on an established
   connection:

   Connection.Send(Content, ...)

   The type of the Content to be passed is dependent on the
   implementation, and on the constraints on the Protocol Stacks implied
   by the Connection's transport parameters.  It may itself contain an
   array of octets to be transmitted in the transport protocol payload,
   or be transformable to an array of octets by a sender-side framer
   (see Section 7.2).

   If Send is called on a Connection which has not yet been established,
   an Initiate action will be implicitly performed simultaneously with
   the Send.  Used together with the Idempotent property (see
   Section 7.1.5), this can be used to send data during establishment
   for 0-RTT session resumption on Protocol Stacks that support it.

   Like all Actions in this interface, the Send action is asynchronous.
   However, a Send call may block until there is sufficient buffer space
   in the implementation and/or the underlying Protocol Stack to handle
   the Content, in order to provide sender-side backpressure to the
   application when transmission is limited by transport channel
   capacity.

   Connection -> Sent<contentRef>

   The Sent event occurs when a previous Send action has completed, i.e.
   when the data derived from the Content has been passed down or
   through the underlying Protocol Stack and is no longer the
   responsbility of the implementation of this interface.  The exact
   disposition of Content when the Sent event occurs is specific to the
   implementation and the constraints on the Protocol Stacks implied by
   the Connection's transport parameters.  The Sent event contains an
   implementation-specific reference to the Content to which it applies.

   Connection -> Expired<contentRef>

   The Expired event occurs when a previous Send action expired before
   completion; i.e. when the data derived from the Content was not sent
   before its Lifetime (see Section 7.1.1) expired.  This is separate



Trammell, et al.         Expires August 12, 2018               [Page 19]

Internet-Draft               TAPS Interface                February 2018


   from SendError, as it is an expected behavior for partially reliable
   transports.  The Expired event contains an implementation-specific
   reference to the Content to which it applies.

   Connection -> SendError<contentRef>

   A SendError occurs when Content could not be sent due to an error
   condition: some failure of the underlying Protocol Stack, or a set of
   send parameters not consistent with the Connection's transport
   parameters.

7.1.  Send Properties

   The Send action takes five per-Content properties which control how
   it will be sent down to the underlying Protocol Stack and
   transmitted.  Note that some of these properties are not compatible
   with transport parameters; attempting to Send with such an
   incompatibility yields a SendError.

7.1.1.  Lifetime

   Lifetime specifies how long a particular Content can wait to be sent
   to the remote endpoint before it is irrelevant and no longer needs to
   be (re-)transmitted.  When a Content's Lifetime is infinite, it must
   be transmitted reliably.  The type and units of Lifetime are
   implementation-specific.

7.1.2.  Niceness

   Niceness represents an unbounded hierarchy of priorities of Content,
   relative to other Content sent over the same Connection and/or
   Connection Group (see Section 6.4).  It is most naturally represented
   as a non-negative integer.  Content with Niceness 0 will yield to
   Content with Niceness 1, which will yield to Content with Niceness 2,
   and so on.  Niceness may be used as a sender-side scheduling
   construct only, or be used to specify priorities on the wire for
   Protocol Stacks supporting prioritization.

   [Task: decide whether / how to keep this (issue #32)]

   Note that this inversion of normal schemes for expressing priority
   has a convenient property: priority increases as both Niceness and
   Lifetime decrease.

   [MICHAEL: not convinced :-) still awkward, still a Unix artifact if
   you ask me]





Trammell, et al.         Expires August 12, 2018               [Page 20]

Internet-Draft               TAPS Interface                February 2018


7.1.3.  Ordered

   Ordered is a boolean property.  If true, this Content should be
   delivered after the last Content passed to the same Connection via
   the Send action; if false, this Content may be delivered before the
   last Content passed to the same Connection.

7.1.4.  Immediate

   Immediate is a boolean property.  If true, the caller prefers
   immediacy to efficiency for this Content, and the Content should not
   be bundled with other Content into the same transmission by the
   underlying Protocol Stack.

7.1.5.  Idempotent

   Idempotent is a boolean property.  If true, the application-layer
   entity in the Content is safe to send to the remote endpoint more
   than once for a single Send action.  It is used to mark data safe for
   certain 0-RTT establishment techniques, where retransmission of the
   0-RTT data may cause the remote application to receive the Content
   multiple times.

   [NOTE: we need some way to signal to the transport that we want to
   wait for 0RTT data on Initiate.  Probably a transport parameter]

7.2.  Sender-side Framing

   Sender-side framing allows a caller to provide the interface with a
   function that takes Content of an appropriate type and returns an
   array of octets, the on-the-wire representation of the content to be
   handed down to the Protocol Stack.  It consists of a Framer object
   with a single Action, Frame.  Since the Framer depends on the
   protocol used at the application layer, it is bound to the Connection
   during the pre-establishment phase:

   Connection.FrameWith(Framer)

   OctetArray := Framer.Frame(Content)

   Sender-side framing is a convenience feature of the interface, for
   parity with receiver-side framing (see Section 8.2).

8.  Receiving Data

   Once a Connection is established, Content may be received on it.  The
   interface notifies the application that content has been received via
   the Received event:



Trammell, et al.         Expires August 12, 2018               [Page 21]

Internet-Draft               TAPS Interface                February 2018


   Connection -> Received<Content>

   As with sending, the type of the Content to be passed is dependent on
   the implementation, and on the constraints on the Protocol Stacks
   implied by the Connection's transport parameters.  The Content may
   also contain metadata from protocols in the Protocol Stack for
   logging and debugging purposes.

   The Content object must provide some method to retrieve an octet
   array containing application data, corresponding to a single message
   within the underlying Protocol Stack's framing.  See Section 8.2 for
   handling framing in situations where the Protocol Stack provides
   octet-stream transport only.

   Connection -> ReceiveError<>

   A ReceiveError occurs when data is received by the underlying
   Protocol Stack that cannot be fully retrieved or deframed, or when
   some other indication is recieved that reception has failed.  Such
   conditions that irrevocably lead the the termination of the
   Connection are signaled using ConnectionError instead (see
   Section 9).

8.1.  Application-Layer Backpressure at the Receiver

   Implementations of this interface must provide some way for the
   application to indicate that it is temporarily not ready to receive
   new Content.  Since the mechanisms of event handling are
   implementation-platform specific, this document does not specify the
   exact nature of this

8.2.  Receiver-side Deframing over Stream Protocols

   The Receive event is intended to be fired once per application-layer
   Content sent by the remote endpoint; i.e., it is a desired property
   of this interface that a Send at one end of a Connection maps to
   exactly one Receive on the other end.  This is possible with Protocol
   Stacks that provide a mechanism message boundary preservation, but is
   not the case over Protocol Stacks that provide a simple octet stream
   transport.

   For preserving message boundaries over stream transports, this
   interface provides receiver-side deframing.  This facility is based
   on the observation that, since many of our current application
   protocols evolved over TCP, which does not provide message boundary
   preservation, and since many these protocols require message
   boundaries to function, each application layer protocol has defined
   its own framing.  A Deframer allows an application to push this



Trammell, et al.         Expires August 12, 2018               [Page 22]

Internet-Draft               TAPS Interface                February 2018


   deframing down into the interface, in order to transform an octet
   stream into a sequence of Content.

   Concretely, receiver-side deframing allows a caller to provide the
   interface with a function that takes an octet stream, as provided by
   the underlying Protocol Stack, reads and returns a sigle Content of
   an appropriate type for the application and platform, and leaves the
   octet stream at the start of the next Content.  It consists of a
   Deframer object with a single Action, Deframe.  Since the Deframer
   depends on the protocol used at the application layer, it is bound to
   the Connection during the pre-establishment phase:

   Connection.DeframeWith(Deframer)

   Content := Deframer.Deframe(OctetStream, ...)

9.  Connection Termination

   Close terminates a Connection after satisfying all the requirements
   that were specified regarding the delivery of Content that the
   application has already given to the transport system.  For example,
   if reliable delivery was requested for Content handed over before
   calling Close, the transport system will ensure that such Content is
   indeed delivered.  If the peer still has data to send, it cannot be
   received after this call.

   Connection.Close()

   This event can (i.e., this is not guaranteed to happen) inform the
   application that the peer has closed the Connection:

   Connection -> Finished<>

   Abort terminates a Connection without delivering remaining data:

   Connection.Abort()

   This event can (i.e., this is not guaranteed to happen) inform the
   application that the other side has aborted the Connection:

   Connection -> ConnectionError<>

10.  Event and Error Handling

   [NOTE: point out that events and errors may be handled differently,
   although they are the modeled the same in this specification.]





Trammell, et al.         Expires August 12, 2018               [Page 23]

Internet-Draft               TAPS Interface                February 2018


11.  IANA Considerations

   RFC-EDITOR: Please remove this section before publication.

   This document has no actions for IANA.

12.  Security Considerations

   be paranoid

13.  References

13.1.  Normative References

   [I-D.ietf-tsvwg-rtcweb-qos]
              Jones, P., Dhesikan, S., Jennings, C., and D. Druta, "DSCP
              Packet Markings for WebRTC QoS", draft-ietf-tsvwg-rtcweb-
              qos-18 (work in progress), August 2016.

   [I-D.ietf-tsvwg-sctp-ndata]
              Stewart, R., Tuexen, M., Loreto, S., and R. Seggelmann,
              "Stream Schedulers and User Message Interleaving for the
              Stream Control Transmission Protocol", draft-ietf-tsvwg-
              sctp-ndata-13 (work in progress), September 2017.

   [TAPS-ARCH]
              Pauly, T., Ed., Trammell, B., Ed., Brunstrom, A.,
              Fairhurst, G., Perkins, C., Tiesel, P., and C. Wood, "An
              Architecture for Transport Services", n.d..

13.2.  Informative References

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <https://www.rfc-editor.org/info/rfc793>.

   [RFC8095]  Fairhurst, G., Ed., Trammell, B., Ed., and M. Kuehlewind,
              Ed., "Services Provided by IETF Transport Protocols and
              Congestion Control Mechanisms", RFC 8095,
              DOI 10.17487/RFC8095, March 2017,
              <https://www.rfc-editor.org/info/rfc8095>.

   [TAPS-MINSET]
              Welzl, M. and S. Gjessing, "A Minimal Set of Transport
              Services for TAPS Systems", draft-ietf-taps-minset-01
              (work in progress), February 2018.





Trammell, et al.         Expires August 12, 2018               [Page 24]

Internet-Draft               TAPS Interface                February 2018


Authors' Addresses

   Brian Trammell (editor)
   ETH Zurich
   Gloriastrasse 35
   8092 Zurich
   Switzerland

   Email: ietf@trammell.ch


   Michael Welzl (editor)
   University of Oslo


   Gorry Fairhurst
   University of Aberdeen

   Email: gorry@erg.abdn.ac.uk


   Mirja Kuehlewind
   ETH Zurich
   Gloriastrasse 35
   8092 Zurich
   Switzerland

   Email: mirja.kuehlewind@tik.ee.ethz.ch


   Colin Perkins
   University of Glasgow
   School of Computing Science
   Glasgow  G12 8QQ
   United Kingdom

   Email: csp@csperkins.org


   Philipp S. Tiesel
   TU Berlin

   Email: philipp@inet.tu-berlin.de








Trammell, et al.         Expires August 12, 2018               [Page 25]

Internet-Draft               TAPS Interface                February 2018


   Theresa Enghardt
   TU Berlin

   Email: theresa@inet.tu-berlin.de


   Chris Wood
   Apple Inc.
   1 Infinite Loop
   Cupertino, California 95014
   United States of America

   Email: cawood@apple.com






































Trammell, et al.         Expires August 12, 2018               [Page 26]
