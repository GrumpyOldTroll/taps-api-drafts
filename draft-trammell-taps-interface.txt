



TAPS Working Group                                      B. Trammell, Ed.
Internet-Draft                                                ETH Zurich
Intended status: Informational                             M. Welzl, Ed.
Expires: August 3, 2018                               University of Oslo
                                                            G. Fairhurst
                                                  University of Aberdeen
                                                           M. Kuehlewind
                                                              ETH Zurich
                                                              C. Perkins
                                                   University of Glasgow
                                                               P. Tiesel
                                                               TU Berlin
                                                                 C. Wood
                                                              Apple Inc.
                                                        January 30, 2018


     An Abstract Application Layer Interface to Transport Services
                  draft-trammell-taps-interface-latest

Abstract

   This document describes an abstract programming interface to the
   transport layer, following the Transport Services Architecture.  It
   supports the asynchronous, atomic transmission of messages over
   transport protocols and network paths dynamically selected at
   runtime.  It is intended to replace the traditional BSD sockets API
   as the lowest common denominator interface to the transport layer, in
   an environment where endpoints have multiple interfaces and potential
   transport protocols to select from.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 3, 2018.




Trammell, et al.         Expires August 3, 2018                 [Page 1]

Internet-Draft               TAPS Interface                 January 2018


Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology and Notation  . . . . . . . . . . . . . . . . . .   3
   3.  Design Principles . . . . . . . . . . . . . . . . . . . . . .   4
   4.  API Summary . . . . . . . . . . . . . . . . . . . . . . . . .   5
   5.  Pre-Establishment Phase . . . . . . . . . . . . . . . . . . .   5
     5.1.  Resolving Remote Endpoints  . . . . . . . . . . . . . . .   5
     5.2.  Specifying Transport Parameters . . . . . . . . . . . . .   5
     5.3.  Specifying Cryptographic Parameters . . . . . . . . . . .   5
   6.  Establishing Connections  . . . . . . . . . . . . . . . . . .   5
     6.1.  Active Open: Connect  . . . . . . . . . . . . . . . . . .   5
     6.2.  Passive Open: Listen  . . . . . . . . . . . . . . . . . .   5
     6.3.  Peer to Peer Establishment: Rendezvous  . . . . . . . . .   5
     6.4.  Connection Groups . . . . . . . . . . . . . . . . . . . .   5
   7.  Sending Data  . . . . . . . . . . . . . . . . . . . . . . . .   5
     7.1.  Send Parameters . . . . . . . . . . . . . . . . . . . . .   5
     7.2.  Sender-side Framing over Stream Protocols . . . . . . . .   6
   8.  Receiving Data  . . . . . . . . . . . . . . . . . . . . . . .   6
     8.1.  Receiver-side Deframing over Stream Protocols . . . . . .   6
   9.  Responding to Events  . . . . . . . . . . . . . . . . . . . .   6
   10. Error Handling  . . . . . . . . . . . . . . . . . . . . . . .   6
   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .   6
   12. Security Considerations . . . . . . . . . . . . . . . . . . .   6
   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .   6
     13.1.  Normative References . . . . . . . . . . . . . . . . . .   6
     13.2.  Informative References . . . . . . . . . . . . . . . . .   6
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   7








Trammell, et al.         Expires August 3, 2018                 [Page 2]

Internet-Draft               TAPS Interface                 January 2018


1.  Introduction

   The BSD Unix Sockets API's SOCK_STREAM abstraction, by bringing
   network sockets into the UNIX programming model, allowing anyone who
   knew how to write programs that dealt with sequential-access files to
   also write network applications, was a revolution in simplicity.  It
   would not be an overstatement to say that this simple API is the
   reason the Internet won the protocol wars of the 1980s.  SOCK_STREAM
   is tied to the Transmission Control Protocol (TCP), specified in 1981
   [RFC0793].  TCP has scaled remarkably well over the past three and a
   half decades, but its total ubiquity has hidden an uncomfortable
   fact: the network is not really a file, and stream abstractions are
   too simplistic for many modern application programming models.

   In the meantime, the nature of Internet access, and the variety of
   Internet transport protocols, is evolving.  The challenges that new
   protocols and access paradigms present to the sockets API and to
   programming models based on them inspire the design principles of a
   new approach, which we outline in Section 3.

   As a first step to realizing this design, [TAPS-ARCH] describes a
   high-level architecture for transport services.  This document builds
   a modern abstract programming interface atop this architecture,
   deriving specific path and protocol selection properties and
   supported transport features from the analysis provided in [RFC8095]
   and [TAPS-MINSET].

2.  Terminology and Notation

   This API is described in terms of Objects, which an application can
   interact with; Actions the application can perform on these objects;
   Events, which an object can send to an application asynchronously;
   and Parameters associated with these Actions and Events.

   The following notations, which can be combined, are used in this
   document:

   o  Object := Action()



         An Action creates an Object.

   o  Object.Action()



         An Action is performed on an Object.



Trammell, et al.         Expires August 3, 2018                 [Page 3]

Internet-Draft               TAPS Interface                 January 2018


   o  Object -> Event()



         An Object sends an Event.

   o  Action(Parameters) / Event(Parameters)



         An Action takes a set of Parameters; an Event contains a set of
         Parameters.

   Actions associated with no object are Actions on the abstract
   interface itself; they are equivalent to actions on a per-application
   global context.

   How these abstract concepts map into concrete implementations of this
   API in a given language on a given platform is largely dependent on
   the features of the language and the platform.  Actions could be
   implemented as functions or method calls, for instance, and Events
   could be implemented though via callback passing or other
   asynchronous calling conventions.

3.  Design Principles

   We begin with a set of initial design principles for the abstract
   interface to realize.

   o  Transport protocol stack independence in line with the Transport
      Services Architecture [TAPS-ARCH], allowing applications to be
      written in terms of the semantics best for the application's own
      design, separate from the protocol(s) used on the wire to achieve
      them.  This enables applications written to a single API to make
      use of transport protocols in terms of the features they provide.

   o  Explicit support for multistreaming and multipath transport
      protocols.

   o  Explicit support for security properties as first-order transport
      features, and for long-term caching of cryptographic identities
      and parameters for associations among endpoints.

   o  Atomic transmission of content, using application-assisted framing
      and deframing where the underlying transport does not provide
      these.





Trammell, et al.         Expires August 3, 2018                 [Page 4]

Internet-Draft               TAPS Interface                 January 2018


   o  Asynchronous connection establishment, transmission, and
      reception, allowing most application interactions with the
      transport layer to be event-driven.

4.  API Summary

   summarize API here

   In the following sections, we describe the details of application
   interaction with Objects through Actions and Events in each phase of
   a connection, following the phases described in [TAPS-ARCH].

5.  Pre-Establishment Phase

   Establishment begins with the creation of a Connection...

5.1.  Resolving Remote Endpoints

   note here: resolution should be flexible, and should accept URLS and
   URL-like things. binding to transport or pseudotransport happens via
   pre-establishment properties.

5.2.  Specifying Transport Parameters

   list parameters to bind to a connection before establishing it

5.3.  Specifying Cryptographic Parameters

   list cryptographic parameters supported during pre-establishment

6.  Establishing Connections

6.1.  Active Open: Connect

6.2.  Passive Open: Listen

6.3.  Peer to Peer Establishment: Rendezvous

6.4.  Connection Groups

7.  Sending Data

7.1.  Send Parameters








Trammell, et al.         Expires August 3, 2018                 [Page 5]

Internet-Draft               TAPS Interface                 January 2018


7.2.  Sender-side Framing over Stream Protocols

8.  Receiving Data

8.1.  Receiver-side Deframing over Stream Protocols

9.  Responding to Events

10.  Error Handling

11.  IANA Considerations

   RFC-EDITOR: Please remove this section before publication.

   This document has no actions for IANA.

12.  Security Considerations

   be paranoid

13.  References

13.1.  Normative References

   [TAPS-ARCH]
              Pauly, T., Ed., Trammell, B., Ed., Brunstrom, A.,
              Fairhurst, G., Perkins, C., Tiesel, P., and C. Wood, "An
              Architecture for Transport Services", n.d..

13.2.  Informative References

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <https://www.rfc-editor.org/info/rfc793>.

   [RFC8095]  Fairhurst, G., Ed., Trammell, B., Ed., and M. Kuehlewind,
              Ed., "Services Provided by IETF Transport Protocols and
              Congestion Control Mechanisms", RFC 8095,
              DOI 10.17487/RFC8095, March 2017,
              <https://www.rfc-editor.org/info/rfc8095>.

   [TAPS-MINSET]
              Welzl, M. and S. Gjessing, "A Minimal Set of Transport
              Services for TAPS Systems", draft-ietf-taps-minset-00
              (work in progress), October 2017.






Trammell, et al.         Expires August 3, 2018                 [Page 6]

Internet-Draft               TAPS Interface                 January 2018


Authors' Addresses

   Brian Trammell (editor)
   ETH Zurich
   Gloriastrasse 35
   8092 Zurich
   Switzerland

   Email: ietf@trammell.ch


   Michael Welzl (editor)
   University of Oslo


   Gorry Fairhurst
   University of Aberdeen

   Email: gorry@erg.abdn.ac.uk


   Mirja Kuehlewind
   ETH Zurich
   Gloriastrasse 35
   8092 Zurich
   Switzerland

   Email: mirja.kuehlewind@tik.ee.ethz.ch


   Colin Perkins
   University of Glasgow
   School of Computing Science
   Glasgow  G12 8QQ
   United Kingdom

   Email: csp@csperkins.org


   Philipp S. Tiesel
   TU Berlin

   Email: philipp@inet.tu-berlin.de








Trammell, et al.         Expires August 3, 2018                 [Page 7]

Internet-Draft               TAPS Interface                 January 2018


   Chris Wood
   Apple Inc.
   1 Infinite Loop
   Cupertino, California 95014
   United States of America

   Email: cawood@apple.com












































Trammell, et al.         Expires August 3, 2018                 [Page 8]
